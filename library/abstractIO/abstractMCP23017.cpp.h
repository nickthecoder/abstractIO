/*
 * NOTE. The weird .ccp.h file extension is a bodge to work around a problem with the Arduino IDE.
 * It appears the library path is generated by parsing the .ino file, and therefore only projects that include
 * Wire.h will compile this library correctly. However, most projects won't use this part of AbstractIO,
 * and therefore won't need Wire.h.
 * 
 * So instead, any project which depends on this file must #include this file (instead of the .h file) in the main .ino source file.
 * 
 * I know this is a horrible bodge, but I can't find a better solution.
 * Hopefully future versions of the Arduino IDE will either stop trying (and failing) to be clever, or actually BE clever!
 * The only other alternative is to force all projects which use AbstractIO to #include <Wire.h>, even when they don't use it.
 * That's unacceptable to me, so the bodge remains.
 */

#include <abstractMCP23017.h>

#include <Wire.h>

#define MCP23017_BASE_ADDRESS 0x20 // The base I2C address. the low 3 bits are user defined.

// See page 12 of : http://ww1.microchip.com/downloads/en/DeviceDoc/20001952C.pdf
#define MCP23017_IODIRA 0x00 // Set the direction of bank A pins (HIGH for INPUT, and LOW for OUTPUT)
#define MCP23017_IODIRB 0x01 // Set the direction of bank B pins (HIGH for INPUT, and LOW for OUTPUT)

#define MCP23017_GPPUA 0x0C // Enable pullup resistors on bank A
#define MCP23017_GPPUB 0x0D // Enable pullup resistors on bank B

#define MCP23017_GPIOA  0x12 // Read GPIO bank A
#define MCP23017_GPIOB  0x13 // Read GPIO bank B

#define MCP23017_OLATA  0x14 // Output Latch bank A
#define MCP23017_OLATB  0x15 // Output Latch bank B


// ABSTRACT MCP23017

AbstractMCP23017::AbstractMCP23017( byte address )
{
    Wire.begin();
    this->i2cAddress = MCP23017_BASE_ADDRESS | address;
}

byte AbstractMCP23017::readRegister( byte registerID )
{
    Wire.beginTransmission( this->i2cAddress );
    Wire.write(registerID);
    Wire.endTransmission();

    Wire.requestFrom( (uint8_t) this->i2cAddress, (uint8_t) 1 );
    byte a = Wire.read();
    return a;
}

unsigned int AbstractMCP23017::readRegister2( byte registerID )
{
    Wire.beginTransmission( this->i2cAddress );    
    Wire.write(registerID);
    Wire.endTransmission();

    Wire.requestFrom( (uint8_t) this->i2cAddress, (uint8_t) 2 );
    byte a = Wire.read();
    byte b = Wire.read();
    // Note, this only works because by default reading data increments the register being read.
    // If you change the default, this will stop working!
    
    return (b << 8) | a;
}

void AbstractMCP23017::writeRegister( byte registerID, byte data )
{
    Wire.beginTransmission( this->i2cAddress );
    Wire.write(registerID);
    Wire.write(data);
    Wire.endTransmission();
}

void AbstractMCP23017::writeRegister2( byte registerID, unsigned int data )
{
    Wire.beginTransmission( this->i2cAddress );
    Wire.write(registerID);
    Wire.write(data && 0xff);
    Wire.write(data >> 8);
    Wire.endTransmission();
}

unsigned int AbstractMCP23017::readBoth()
{
    return this->readRegister2( MCP23017_GPIOA );
}

byte AbstractMCP23017::readBank( boolean bankA )
{
    return this->readRegister( bankA ? MCP23017_GPIOA : MCP23017_GPIOB );
}

void AbstractMCP23017::writeBoth( unsigned int data )
{
    this->writeRegister2( MCP23017_GPIOA, data );
}

void AbstractMCP23017::writeBank( boolean bankA, byte data )
{
    this->writeRegister( bankA ? MCP23017_GPIOA : MCP23017_GPIOB, data );
}

void AbstractMCP23017::setRegisterBit( byte registerID, byte bit, boolean value )
{
    byte pins = this->readRegister( registerID );
    byte mask = 1 << bit;
    if (value) {
        pins |= mask;
    } else {
        pins &= ~mask;
    }
    this->writeRegister( registerID, pins );
}
     
void AbstractMCP23017::pinMode( byte pinNumber, byte mode )
{
    this->setRegisterBit( pinNumber < 8 ? MCP23017_IODIRA : MCP23017_IODIRB, pinNumber & 7, mode == INPUT );
    if ( mode != OUTPUT ) {
        this->setRegisterBit( pinNumber < 8 ? MCP23017_GPPUA : MCP23017_GPPUB, pinNumber & 7, mode == INPUT_PULLUP );
    }
}

Input* AbstractMCP23017::createInput( byte pinNumber, boolean trueReading, boolean enablePullUp ) 
{
    return new MCP23017Input( this, pinNumber, trueReading, enablePullUp );
}

Output* AbstractMCP23017::createOutput( byte pinNumber) 
{
    return new MCP23017Output( this, pinNumber );
}

// MCP23017

MCP23017::MCP23017( byte i2cAddress ) : AbstractMCP23017( i2cAddress )
{
}

boolean MCP23017::digitalRead( byte pinNumber )
{
    // Read either bank A or B.
    byte pins = this->readBank( pinNumber < 8 );
    // AND the results with a mask for the required pin number
    return (pins & (1 << (pinNumber & 7))) != 0;
}

void MCP23017::digitalWrite( byte pinNumber, boolean value )
{
    this->setRegisterBit( pinNumber < 8 ? MCP23017_OLATA : MCP23017_OLATB, pinNumber & 7, value );
}

// BUFFERED MCP23017

BufferedMCP23017::BufferedMCP23017( byte i2cAddress ) : AbstractMCP23017( i2cAddress )
{
    this->readRequired = true;
    this->outputBuffer = 0;
    this->oldOutputBuffer = 0;
    this->writeBoth( this->outputBuffer );
}

void BufferedMCP23017::read()
{
    readRequired = true;
}

void BufferedMCP23017::flush()
{
    if ( this->oldOutputBuffer != this->outputBuffer ) {
        this->writeBoth( this->outputBuffer );
        this->oldOutputBuffer = this->outputBuffer;
    }
}
    
void BufferedMCP23017::digitalWrite( byte pinNumber, boolean value )
{    
    unsigned int mask = 1 << pinNumber;
    if (value) {
        this->outputBuffer |= mask;
    } else {
        this->outputBuffer &= ~mask;
    }
}

boolean BufferedMCP23017::digitalRead( byte pinNumber )
{
    if (this->readRequired) {
        this->inputBuffer = this->readBoth();
        this->readRequired = false;
    }

    return this->inputBuffer & (1 << pinNumber) != 0;
}

// MCP23017 INPUT

MCP23017Input::MCP23017Input( AbstractMCP23017* mcp23017, byte pinNumber, boolean trueReading, boolean enablePullUp )
{
    this->mcp23017 = mcp23017;
    this->pinNumber = pinNumber;
    this->trueReading = trueReading;
    this->mcp23017->pinMode( pinNumber, enablePullUp ? INPUT_PULLUP : INPUT );
}

boolean MCP23017Input::get()
{
    return this->mcp23017->digitalRead( this->pinNumber ) == this->trueReading;
}

// MCP23017 OUTPUT

MCP23017Output::MCP23017Output( AbstractMCP23017* mcp23017, byte pinNumber )
{
    this->mcp23017 = mcp23017;
    this->pinNumber = pinNumber;
    this->mcp23017->pinMode( pinNumber, OUTPUT );
}

void MCP23017Output::set( boolean value )
{
    this->mcp23017->digitalWrite( this->pinNumber, value );
}

// END
